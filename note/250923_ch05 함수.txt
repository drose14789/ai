5장 함수
1절 함수의 정의 및 사용
	1.1 함수 정의
	ex)def my_message(x, msg): # msg를 x번 출력하는 함수 정의
   		 for i in range(x):
        			print(i, msg)
	# 함수 사용 == 함수 호출	
	my_message(3, 'Hello')

	0 Hello
	1 Hello
	2 Hello
	
	# 함수 이름 변경
	my_msg = my_message

	# 파이썬 내장 함수(import 하지 않고 사용할 수 있는 함수)
	# Python에서는 함수 중복 정의 불가(오버로딩 불가), 중복 될 시 함수가 덮어써짐

	1.2 docstring
	'''
	함수의 첫 라인에 독스트링을 포함할 수 있습니다
    	독스트링은 함수의 설명서를 달아주는 역할
    	주석보다 많은 기능(함수 호출시 shift+tab으로 독스트링을 볼 수 있음)
	'''

	1.3 지역변수(local var)와 전역변수(global var)
	ex)#렉시컬 특성
	g_var = 100 # 전역변수
	def func3():
    		global g_var # 함수내에서의 g_var는 전역변수를 쓰겠다
    		print('g_var :',g_var)
    		g_var = 200 # 지역변수 (함수내에서 할당)
	func3()
	print('g_var :', g_var)
	
	g_var : 100
	g_var : 200

	1.4 값에 의한 호출
	- 함수에 인수로 전달되는 변수 스칼라변수(문자, 숫자, 논리형)

	1.5 참조에 의한 호출
	- 함수에 인수로 전달되는 변수가 리스트, 튜플, 셋, 딕셔너리, 기타 객체일 경우

2절 함수의 실행 결과를 반환하는 return
	ex)def fibonacci_print(n):
    	'''
   	매개변수로 들어온 n값 미만의 피보나치 수열을 출력하는 함수
    	ex. n=10 : 0, 1, 1, 2, 3, 5, 8
        	n=100 : 0 1 1 2 3 5 8 13 21 34 55 89
    	'''
    	a, b = 0, 1 # 함수 내에 선언하 변수 : 지역변수(반:전역변수)
    	while a < n:
        		print(a, end = ' ')
        		a, b = b, a+b
    	print() # 개행
	def fibonacci(n):
    	"n미만의 피보나치수열을 리스트로 return"
    	result = [] # 피보나치수열을 append할 리스트
    	a, b = 0, 1
    	while a<n:
        		result.append(a) # 리스트에 append
        		a, b = b, a+b
    	return result

	여러개 값 return
	- 여러개 값을 갖는 튜플로 리턴
	ex) def swap(a,b):
   	 '매개변수의 순서를 바꿔서 return'
    		return b,a # return (b,a)

	a = swap(1,2)
	type(a)
	print(a)

	tuple
	(2, 1)

3절 함수의 매개변수 ★

	3.1 기본 값을 갖는 매개변수
	ex) def make_url(ip, port=80): #순서인수가 앞에 있어야함 > 기본값을 갖는 매개변수
   		return "http://{}:{}".format(ip, port)
	print(make_url("localhost"))
	print(make_url("localhost", 8090))
	print(make_url("www.naver.com"))
	print(make_url(port=9090, ip="localhost"))
	#print(make_url(port=9090)) ip는 기본값을 가지지 않음 에러

	http://localhost:80
	http://localhost:8090
	http://www.naver.com:80
	http://localhost:9090

	#def make_url(port=80, ip): #순서인수가 앞에 있어야함 > 기본값을 갖는 매개변수
	#    return "http://{}:{}".format(ip, port) 에러
	
	3.2 기본 변수를 갖는 매개변수
	- 기본 변수가 스칼라변수(문자,숫자, 논리형)일 때
	# 기본 변수가 스칼라 변수일 때 : 함수가 정의 되는 시점으로 기본값 셋팅

	- 기본 변수가 리스트, 셋, 딕셔너리, 기타 객체일 때
	# 기본 변수가 리스트, 셋, 딕셔너리, 객체일 때: 함수가 실행되는 시점으로 기본값 셋팅
	
	# 실행할 때마다 L을 공유하는게 싫으면
	def func3(a, L= None):
   		 if L is None:
        			L = []
   	 	L.append(a)
    		return L
	print(func3(10))
	print(func3(10))
	print(func3(10))
	print(func3(10, [1,2,3]))
	print(func3(10))
	
	[10]
	[10]
	[10]
	[1, 2, 3, 10]
	[10]
	
	3.3 순서인수, 키워드인수
	- 순서인수 : 함수에 정의된 순서대로 전달방식
	- 키워드인수 : 인수의 이름을 명시하는 방식
	- 함수 정의시 순서인수와 키워드인수가 같이 올 때는 순서인수 > 키워드인수 순으로
	
	3.4 튜플 매개변수를 이용한 가변인수 설정
	- 가변인수 : 매개변수의 갯수가 가변
	# 매개변수 앞에 *를 붙여 정의 
		args 앞에 * : args가 튜플로 전달받는다
	# 튜플매개변수 > 키워드인수
	ex)def concat(sep, *args):
    		return sep.join(args)
	   concat('-', 'Python', 'HTML/CSS', 'JavaScript', 'Oracle/MySQL')

	  'Python-HTML/CSS-JavaScript-Oracle/MySQL'


