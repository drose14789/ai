8장 예외처리
- 에러
    (1) 문법에러 : 문법적으로 나타나는 에러(프로그램을 수정)
    (2) 실행에러(실행시 에러) :
        * 시스템에러 : 프로그래머의 의지와 상관없이 나타나는 에러
        * 예외 : 정상적으로 동작하는 프로그램에서 나타나는 에러(MILD한 에러)
1절. 예외처리 필요성
- 예외가 날 가능성이 있는 부분에 대해서 미리 예상하고, 그에 대한 처리를 프로그래밍하는 것
    (필요한 이유 : 좀 더 안정적인 시스템)

    ex1. 파일을 다룰 때, 파일이 없거나, 쓰기금지, 파일 인코딩 방법에 인한 오류
    ex2. 데이터베이스 프로그래밍 시 제약조건 등에 의한 CRUD(create, road, update, delete) 명령 수행 오류,
	DBMS 서버 오류
    ex3. 네트워크 프로그래밍 시 네트워크 연결 오류
    ex4. 리스트나 튜플의 인덱스를 벗어난 참조에 의한 오류

2절 try~except로 예외처리
	2.1 try~except

	try :
     	   예외가 발생할 가능성이 있는 명령어들
     
	except :
   	   예외가 발생했을 경우 실행할 명령어들

	2.2 지정된 예외 처리
	
	try:
    		예외가 발생할 수도 있는 명령어
	except (예외타입1,예외타입2) :
   		 해당 예외가 발생할 경우 실행할 명령어
	except 예외타입1 :
    		해당 예외가 발생할 경우 실행할 명령어
	except 예외타입2 :
    		해당 예외가 발생할 경우 실행할 명령어
	
	2.3 예외 인수(e) 
	try:
    		예외가 발생할 수도 있는 명령어
	except 예외타입 as e:
    		print(e)
    		print(e.args[0]) # 예외메세지 출력

	try:
    		예외 발생 가능성 명령어
	except [예외타입 [as e]]:
    		예외타입 발생시 실행할 명령어
	[else:
    		try절 수행하다 예외가 발생 안되면 else절 수행
   		 try절 수행하다 예외가 발생하면 except 절 수행(else절 수행 안 함)
	]
	[finally:
    		try절에서 예외가 발생하든 안하든 마지막에 수행
	]

3절 raise
-강제 예외 발생

4절 추상클래스
- 추상클래스 : 추상메소드가 1개 이상 포함된 클래스를 추상클래스.
- 추상메소드 : 호출할 수 없는 메소드. 상속받은 클래스에서 재정의를 강요할 때
- python에서 추상메소드는 @abstractmethod나raise를 이용

5절 파일 정리 작업(with 절 이용)

with 절 이후에는 자동적으로 close() 실행

ex)
try:
    f = open('data/ch08.txt', 'r', encoding = 'utf-8')
    lines = f.readlines() # 한줄한줄 모든 줄을 한꺼번에 list로 읽어오기
    print(lines)
except Exception as e:
    print(e)
finally:
    f.close()

#위 코딩과 아래 코딩은 서로 같은 내용

with open('data/ch08.txt', 'r', encoding='utf-8') as f:
    lines = f.readlines()
print(lines)
